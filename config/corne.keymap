#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        kill_window: kill_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp NUMBER_0>;
            label = "KILL_WINDOW";
        };

        horizontal_split: horizontal_split {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp NUMBER_2>;
            label = "HORIZONTAL_SPLIT";
        };

        vertical_split: vertical_split {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp NUMBER_3>;
            label = "VERTICAL_SPLIT";
        };

        tab_cycle: tab_cycle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp NUMBER_4 &kp T>;
            label = "TAB_CYCLE";
        };

        switch_buffer: consult_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp B>;
            label = "CONSULT_BUFFER";
        };

        cycle_window: cycle_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X) &kp O>;
            label = "CYCLE_WINDOW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R         &kp T        &kp Y      &kp U          &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F         &kp G        &kp H      &kp J          &kp K      &kp L    &kp SEMI  &lt 1 SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V         &kp B        &kp N      &kp M          &kp COMMA  &kp DOT  &kp FSLH  &lt 3 ESCAPE
                         &kp LGUI  &kp LEFT_ALT  &kp SPACE    &kp ENTER  &kp RIGHT_ALT  &tog 2
            >;
        };

        numerical {
            bindings = <
&kp TILDE     &kp EXCL      &kp AT                &kp POUND             &kp DOLLAR      &kp PERCENT         &kp CARET          &kp AMPERSAND    &kp ASTERISK           &kp MINUS  &kp EQUAL  &trans
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2          &kp NUMBER_3          &kp NUMBER_4    &kp N5              &kp NUMBER_6       &kp N7           &kp N8                 &kp N9     &kp N0     &trans
&trans        &kp GRAVE     &kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans     &kp PIPE   &trans
                                                  &trans                &trans          &trans              &trans             &trans           &trans
            >;
        };

        navigation {
            bindings = <
&trans     &kp LA(V)          &kp UP_ARROW    &trans                &trans     &trans    &trans          &trans        &trans          &trans           &trans  &trans
&kp LC(A)  &kp LEFT_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW       &kp LC(E)  &trans    &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans     &kp LA(LESS_THAN)  &kp LC(V)       &kp LA(GREATER_THAN)  &trans     &trans    &trans          &trans        &trans          &trans           &trans  &trans
                                              &trans                &kp LCTRL  &trans    &trans          &kp RCTRL     &trans
            >;
        };

        emacs {
            bindings = <
&trans  &trans  &trans           &kill_window  &horizontal_split  &vertical_split    &tab_cycle      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LA(PERCENT)  &trans        &trans             &trans             &switch_buffer  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LA(X)        &kp LC(C)     &trans             &trans             &cycle_window   &trans  &trans  &trans  &trans  &trans
                                 &trans        &trans             &trans             &trans          &trans  &trans
            >;
        };
    };
};
